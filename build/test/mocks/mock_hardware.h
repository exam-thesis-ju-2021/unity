/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_HARDWARE_H
#define _MOCK_HARDWARE_H

#include "unity.h"
#include "hardware.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_hardware_Init(void);
void mock_hardware_Destroy(void);
void mock_hardware_Verify(void);




#define hw_init_Ignore() hw_init_CMockIgnore()
void hw_init_CMockIgnore(void);
#define hw_init_StopIgnore() hw_init_CMockStopIgnore()
void hw_init_CMockStopIgnore(void);
#define hw_init_Expect() hw_init_CMockExpect(__LINE__)
void hw_init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_hw_init_CALLBACK)(int cmock_num_calls);
void hw_init_AddCallback(CMOCK_hw_init_CALLBACK Callback);
void hw_init_Stub(CMOCK_hw_init_CALLBACK Callback);
#define hw_init_StubWithCallback hw_init_Stub
#define hw_reset_Ignore() hw_reset_CMockIgnore()
void hw_reset_CMockIgnore(void);
#define hw_reset_StopIgnore() hw_reset_CMockStopIgnore()
void hw_reset_CMockStopIgnore(void);
#define hw_reset_Expect() hw_reset_CMockExpect(__LINE__)
void hw_reset_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_hw_reset_CALLBACK)(int cmock_num_calls);
void hw_reset_AddCallback(CMOCK_hw_reset_CALLBACK Callback);
void hw_reset_Stub(CMOCK_hw_reset_CALLBACK Callback);
#define hw_reset_StubWithCallback hw_reset_Stub
#define pin_mode_Ignore() pin_mode_CMockIgnore()
void pin_mode_CMockIgnore(void);
#define pin_mode_StopIgnore() pin_mode_CMockStopIgnore()
void pin_mode_CMockStopIgnore(void);
#define pin_mode_Expect(gpio, mode) pin_mode_CMockExpect(__LINE__, gpio, mode)
void pin_mode_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t gpio, PinMode mode);
typedef void (* CMOCK_pin_mode_CALLBACK)(uint8_t gpio, PinMode mode, int cmock_num_calls);
void pin_mode_AddCallback(CMOCK_pin_mode_CALLBACK Callback);
void pin_mode_Stub(CMOCK_pin_mode_CALLBACK Callback);
#define pin_mode_StubWithCallback pin_mode_Stub
#define digital_write_Ignore() digital_write_CMockIgnore()
void digital_write_CMockIgnore(void);
#define digital_write_StopIgnore() digital_write_CMockStopIgnore()
void digital_write_CMockStopIgnore(void);
#define digital_write_Expect(gpio, state) digital_write_CMockExpect(__LINE__, gpio, state)
void digital_write_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t gpio, PinState state);
typedef void (* CMOCK_digital_write_CALLBACK)(uint8_t gpio, PinState state, int cmock_num_calls);
void digital_write_AddCallback(CMOCK_digital_write_CALLBACK Callback);
void digital_write_Stub(CMOCK_digital_write_CALLBACK Callback);
#define digital_write_StubWithCallback digital_write_Stub
#define digital_read_IgnoreAndReturn(cmock_retval) digital_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void digital_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, PinState cmock_to_return);
#define digital_read_StopIgnore() digital_read_CMockStopIgnore()
void digital_read_CMockStopIgnore(void);
#define digital_read_ExpectAndReturn(gpio, cmock_retval) digital_read_CMockExpectAndReturn(__LINE__, gpio, cmock_retval)
void digital_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t gpio, PinState cmock_to_return);
typedef PinState (* CMOCK_digital_read_CALLBACK)(uint8_t gpio, int cmock_num_calls);
void digital_read_AddCallback(CMOCK_digital_read_CALLBACK Callback);
void digital_read_Stub(CMOCK_digital_read_CALLBACK Callback);
#define digital_read_StubWithCallback digital_read_Stub
#define analog_write_Ignore() analog_write_CMockIgnore()
void analog_write_CMockIgnore(void);
#define analog_write_StopIgnore() analog_write_CMockStopIgnore()
void analog_write_CMockStopIgnore(void);
#define analog_write_Expect(gpio, state) analog_write_CMockExpect(__LINE__, gpio, state)
void analog_write_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t gpio, PinState state);
typedef void (* CMOCK_analog_write_CALLBACK)(uint8_t gpio, PinState state, int cmock_num_calls);
void analog_write_AddCallback(CMOCK_analog_write_CALLBACK Callback);
void analog_write_Stub(CMOCK_analog_write_CALLBACK Callback);
#define analog_write_StubWithCallback analog_write_Stub
#define analog_read_IgnoreAndReturn(cmock_retval) analog_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void analog_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, PinState cmock_to_return);
#define analog_read_StopIgnore() analog_read_CMockStopIgnore()
void analog_read_CMockStopIgnore(void);
#define analog_read_ExpectAndReturn(gpio, cmock_retval) analog_read_CMockExpectAndReturn(__LINE__, gpio, cmock_retval)
void analog_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t gpio, PinState cmock_to_return);
typedef PinState (* CMOCK_analog_read_CALLBACK)(uint8_t gpio, int cmock_num_calls);
void analog_read_AddCallback(CMOCK_analog_read_CALLBACK Callback);
void analog_read_Stub(CMOCK_analog_read_CALLBACK Callback);
#define analog_read_StubWithCallback analog_read_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
