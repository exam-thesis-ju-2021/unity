/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_HARDWARE_CLASS_H
#define _MOCK_HARDWARE_CLASS_H

#include "unity.h"
#include "hardware_class.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_hardware_class_Init(void);
void mock_hardware_class_Destroy(void);
void mock_hardware_class_Verify(void);




#define new_Hardware_IgnoreAndReturn(cmock_retval) new_Hardware_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void new_Hardware_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define new_Hardware_StopIgnore() new_Hardware_CMockStopIgnore()
void new_Hardware_CMockStopIgnore(void);
#define new_Hardware_ExpectAndReturn(cmock_retval) new_Hardware_CMockExpectAndReturn(__LINE__, cmock_retval)
void new_Hardware_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
typedef void* (* CMOCK_new_Hardware_CALLBACK)(int cmock_num_calls);
void new_Hardware_AddCallback(CMOCK_new_Hardware_CALLBACK Callback);
void new_Hardware_Stub(CMOCK_new_Hardware_CALLBACK Callback);
#define new_Hardware_StubWithCallback new_Hardware_Stub
#define _init_Ignore() _init_CMockIgnore()
void _init_CMockIgnore(void);
#define _init_StopIgnore() _init_CMockStopIgnore()
void _init_CMockStopIgnore(void);
#define _init_Expect(this) _init_CMockExpect(__LINE__, this)
void _init_CMockExpect(UNITY_LINE_TYPE cmock_line, void* this);
typedef void (* CMOCK__init_CALLBACK)(void* this, int cmock_num_calls);
void _init_AddCallback(CMOCK__init_CALLBACK Callback);
void _init_Stub(CMOCK__init_CALLBACK Callback);
#define _init_StubWithCallback _init_Stub
#define _reset_Ignore() _reset_CMockIgnore()
void _reset_CMockIgnore(void);
#define _reset_StopIgnore() _reset_CMockStopIgnore()
void _reset_CMockStopIgnore(void);
#define _reset_Expect(this) _reset_CMockExpect(__LINE__, this)
void _reset_CMockExpect(UNITY_LINE_TYPE cmock_line, void* this);
typedef void (* CMOCK__reset_CALLBACK)(void* this, int cmock_num_calls);
void _reset_AddCallback(CMOCK__reset_CALLBACK Callback);
void _reset_Stub(CMOCK__reset_CALLBACK Callback);
#define _reset_StubWithCallback _reset_Stub
#define _pin_mode_Ignore() _pin_mode_CMockIgnore()
void _pin_mode_CMockIgnore(void);
#define _pin_mode_StopIgnore() _pin_mode_CMockStopIgnore()
void _pin_mode_CMockStopIgnore(void);
#define _pin_mode_Expect(this, gpio, mode) _pin_mode_CMockExpect(__LINE__, this, gpio, mode)
void _pin_mode_CMockExpect(UNITY_LINE_TYPE cmock_line, void* this, uint8_t gpio, PinMode mode);
typedef void (* CMOCK__pin_mode_CALLBACK)(void* this, uint8_t gpio, PinMode mode, int cmock_num_calls);
void _pin_mode_AddCallback(CMOCK__pin_mode_CALLBACK Callback);
void _pin_mode_Stub(CMOCK__pin_mode_CALLBACK Callback);
#define _pin_mode_StubWithCallback _pin_mode_Stub
#define _digital_write_Ignore() _digital_write_CMockIgnore()
void _digital_write_CMockIgnore(void);
#define _digital_write_StopIgnore() _digital_write_CMockStopIgnore()
void _digital_write_CMockStopIgnore(void);
#define _digital_write_Expect(this, gpio, state) _digital_write_CMockExpect(__LINE__, this, gpio, state)
void _digital_write_CMockExpect(UNITY_LINE_TYPE cmock_line, void* this, uint8_t gpio, PinState state);
typedef void (* CMOCK__digital_write_CALLBACK)(void* this, uint8_t gpio, PinState state, int cmock_num_calls);
void _digital_write_AddCallback(CMOCK__digital_write_CALLBACK Callback);
void _digital_write_Stub(CMOCK__digital_write_CALLBACK Callback);
#define _digital_write_StubWithCallback _digital_write_Stub
#define _digital_read_IgnoreAndReturn(cmock_retval) _digital_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void _digital_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, PinState cmock_to_return);
#define _digital_read_StopIgnore() _digital_read_CMockStopIgnore()
void _digital_read_CMockStopIgnore(void);
#define _digital_read_ExpectAndReturn(this, gpio, cmock_retval) _digital_read_CMockExpectAndReturn(__LINE__, this, gpio, cmock_retval)
void _digital_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* this, uint8_t gpio, PinState cmock_to_return);
typedef PinState (* CMOCK__digital_read_CALLBACK)(void* this, uint8_t gpio, int cmock_num_calls);
void _digital_read_AddCallback(CMOCK__digital_read_CALLBACK Callback);
void _digital_read_Stub(CMOCK__digital_read_CALLBACK Callback);
#define _digital_read_StubWithCallback _digital_read_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
